/* 
	Definitions for the responsive table component. 
*/
// The tables use the common table elements and syntax.
// Desktop view.
table {	
	border-collapse: separate;
	border-spacing: 0;
	// Apply border style by default always. Otherwise, browser default will be applied.
	border: $table-border-style;
	@if $table-border-radius != 0 {
		border-radius: $table-border-radius;
	}
	@if $table-margin != 0 {
		margin: $table-margin;
	}
	@if $table-box-shadow != none {
		box-shadow: $table-box-shadow;
	}
	caption {
		font-size: $table-caption-font-size;
		margin: $table-caption-margin;
	}
	tr {
		padding: $table-row-padding;		// Apply always to overwrite default.
	}
	th, td {
		padding: $table-column-padding;		// Apply always to overwrite default.
		border-left: $table-border-style;
		border-top: $table-border-style;
	}
	td {
		@if $table-body-back-color != $back-color {
			background: $table-body-back-color;
		}
		@if $table-body-fore-color != $fore-color {
			color: $table-body-fore-color;
		}
	}
	thead th {
		border-top: 0;	
	}
	th {
		@if $table-head-back-color != $back-color {
			background: $table-head-back-color;
		}
		@if $table-head-fore-color != $fore-color {
			color: $table-head-fore-color;
		}
	}
	th:first-child, td:first-child {
		border-left: 0;
	}
}
// Mobile view for responsive tables.
$table-mobile-breakpoint:		767px !default;									// Breakpoint for table mobile view
$table-not-responsive-name:		'preset' !default;								// Class name for table non-responsive view
@media (max-width: #{$table-mobile-breakpoint}) {
	table:not(.#{$table-not-responsive-name}) {
		border-collapse: collapse;
		border: 0;	
		width: 100%;
		@if $table-box-shadow != none {
			box-shadow: none;
		}
		// Accessibility (element is not visible, but screen readers read it normally)
		thead, th {
			border: 0;
			height: 1px;
			width: 1px;
			margin: -1px;
			overflow: hidden;
			padding: 0;
			position: absolute;	
			clip: rect(0 0 0 0);
			-webkit-clip-path: inset(100%);
					clip-path: inset(100%);	
		}
		tr {
			display: block;
			border: $table-border-style;
			@if $table-border-radius != 0 {
				border-radius: $table-border-radius;
			}  
			@if $table-box-shadow != none {
				box-shadow: $table-box-shadow;
			}	
			@if $table-body-back-color != $back-color {
				background: $table-body-back-color;
			}
			margin-bottom: $table-mobile-card-spacing;
		}
		td {
			display: block;
			border: 0;
			@if $table-border-style != 0 {
				border-bottom: $table-border-style;	
			}
			text-align: right;
		}
		td:before {
			content: attr(#{$table-mobile-card-label});
			float: left;
			font-weight: $table-mobile-label-font-weight;
		}
		td:last-child {
			@if $table-border-style != 0 {
				border-bottom: 0;
			}
		}
	}
}
// Horizontal table view.
$table-horizontal-name:			'horizontal' !default;							// Class name for table horizontal view
@media (min-width: #{$table-horizontal-breakpoint}) {
	table.#{$table-horizontal-name} {
		// Old syntax
		display: -webkit-box;
		-webkit-box-flex: 0;
		-webkit-box-orient: horizontal;
		-webkit-box-direction: normal;
		// New syntax
		display: -webkit-flex;
		display: 		 flex;
		-webkit-flex: 0 1 auto;
				flex: 0 1 auto;
		-webkit-flex-flow: row wrap;
	    		flex-flow: row wrap;
	    padding: $table-row-padding;
	   	caption {
	   		// Old syntax
			-webkit-box-flex: 1;
			max-width: 100%;
			// New syntax
			-webkit-flex: 0 0 100%;
	   				flex: 0 0 100%;
	   	}
	   	thead, tbody {
	   		// Old syntax
			display: -webkit-box;
			-webkit-box-flex: 0;
			-webkit-box-orient: horizontal;
			-webkit-box-direction: normal;
			// New syntax
			display: -webkit-flex;
			display: 		 flex;
			-webkit-flex-flow: row nowrap;
    				flex-flow: row nowrap;
	   	}
	   	thead {
	   		z-index: 999;	// Fixes the visibility of the element.
	   	}
	   	tbody {
	   		overflow: auto;	// Allows content scrolling.
	   		// Old syntax
	   		-webkit-box-pack: justify;
	   		// New syntax
	   		-webkit-justify-content: space-between;
					justify-content: space-between;
			-webkit-flex: 1 0 0;
					flex: 1 0 0;
	   	}
	   	tr {
	   		// Old syntax
			display: -webkit-box;
			-webkit-box-flex: 1;
			-webkit-box-orient: vertical;
			-webkit-box-direction: normal;
			// New syntax
			display: -webkit-flex;
			display: 		 flex;
			-webkit-flex-direction: column;
					flex-direction: column;
			-webkit-flex: 1 0 auto;
	   				flex: 1 0 auto;
	   	}
	   	th, td {
	   		width: 100%;
	   		border: $table-border-style;	// Apply to overwrite.
	   		@if $table-border-style != 0 {
		   		& + th, & + td {
		   			border-top: 0;
		   		}
	   		}
	   	}
	   	th {
	   		text-align: right;
	   	}
	   	thead {
	   		tr:first-child {
	   			padding-left: 0;
	   		}
	   	}
	   	tbody {
	   		tr:first-child > td {
	   			padding-left: 2 * $table-column-padding;	// Fixes padding for the first column of data.
	   		}
	   	}
	   	
	}
}
// Horizontal table view for non-responsive tables. - Apply over breakpoint when non-responsive.
@media (max-width: #{$table-mobile-breakpoint}) {
	table.#{$table-horizontal-name}.#{$table-not-responsive-name} {
		// Old syntax
		display: -webkit-box;
		-webkit-box-flex: 0;
		-webkit-box-orient: horizontal;
		-webkit-box-direction: normal;
		// New syntax
		display: -webkit-flex;
		display: 		 flex;
		-webkit-flex: 0 1 auto;
				flex: 0 1 auto;
		-webkit-flex-flow: row wrap;
	    		flex-flow: row wrap;
	   	caption {
	   		// Old syntax
			-webkit-box-flex: 1;
			max-width: 100%;
			// New syntax
			-webkit-flex: 0 0 100%;
	   				flex: 0 0 100%;
	   	}
	   	thead, tbody {
	   		// Old syntax
			display: -webkit-box;
			-webkit-box-flex: 0;
			-webkit-box-orient: horizontal;
			-webkit-box-direction: normal;
			// New syntax
			display: -webkit-flex;
			display: 		 flex;
			-webkit-flex-flow: row nowrap;
					flex-flow: row nowrap;
	   	}
	   	thead {
	   		z-index: 999;	// Fixes the visibility of the element.
	   	}
	   	tbody {
	   		overflow: auto;
	   		// Old syntax
	   		-webkit-box-pack: justify;
	   		// New syntax
	   		-webkit-justify-content: space-between;
					justify-content: space-between;
			-webkit-flex: 1 0 0;
					flex: 1 0 0;
	   	}
	   	tr {
	   		// Old syntax
			display: -webkit-box;
			-webkit-box-flex: 1;
			-webkit-box-orient: vertical;
			-webkit-box-direction: normal;
			// New syntax
			display: -webkit-flex;
			display: 		 flex;
			-webkit-flex-direction: column;
					flex-direction: column;
			-webkit-flex: 1 0 auto;
	   				flex: 1 0 auto;
	   	}
	   	th, td {
	   		width: 100%;
	   		border: $table-border-style;	// Apply to overwrite.
	   		@if $table-border-style != 0 {
		   		& + th, & + td {
		   			border-top: 0;
		   		}
	   		}
	   	}
	   	th {
	   		text-align: right;
	   	}
	   	tbody {
	   		tr:first-child > td {
	   			padding-left: 2 * $table-column-padding;	// Fixes padding for the first column of data.
	   		}
	   	}
	   	
	}
}
// Striped tables.
$table-striped-name:			'striped' !default;								// Class name for striped table
table.#{$table-striped-name} {
	tr:nth-of-type(2n) > td {
		background: $table-striped-alt-body-back-color;
	}
}
// Responsiveness for striped tables.
@media (max-width: #{$table-mobile-breakpoint}) {
	table.#{$table-striped-name}:not(.#{$table-not-responsive-name}) {
		tr:nth-of-type(2n) {
			background: $table-striped-alt-body-back-color;
		}
	}
}
